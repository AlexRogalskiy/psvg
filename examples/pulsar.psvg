<!-- pulsar.psvg                                  -->
<!-- recreation of the pulsar radio emission plot -->
<!-- from the "Unknown Pleasures" album cover     -->
<!-- (includes a perlin noise implementation)     -->

<psvg width="450" height="500" background="black">

  <!-- perlin noise -->
  <!-- adapted from https://github.com/processing/p5.js/blob/1.1.9/src/math/noise.js -->
  <var PERLIN_YWRAPB="4" PERLIN_YWRAP="{1<<PERLIN_YWRAPB}"
       PERLIN_ZWRAPB="8" PERLIN_ZWRAP="{1<<PERLIN_ZWRAPB}"
       PERLIN_SIZE="4095"
       perlin_octaves="4" perlin_amp_falloff="0.4"
       p_perlin=""
  />

  <!-- TBD: should we officially allow lambda expressions? e.g.: -->
  <!-- <var scaled_cosine="{(i)=>(0.5*(1.0-COS(i*PI)))}"/> -->

  <def-scaled_cosine i="">
    <return value="{0.5*(1.0-COS(i*PI))}"/>
  </def-scaled_cosine>

  <def-noise x="0" y="0" z="0">
    <if false="{COUNT(p_perlin)}">
      <asgn p_perlin="{MAP(FILL(0,PERLIN_SIZE+1),RANDOM)}"/>
    </if>
    <if true="{x<0}"><asgn x="{-x}"/></if>
    <if true="{y<0}"><asgn y="{-y}"/></if>
    <if true="{z<0}"><asgn z="{-z}"/></if>
    <var xi="{FLOOR(x)}" yi="{FLOOR(y)}" zi="{FLOOR(z)}"/>
    <var xf="{x-xi}" yf="{y-yi}" zf="{z-zi}"/>
    <var rxf="0" ryf="0" r="0" ampl="0.5"/>
    <var n1="0" n2="0" n3="0"/>
    <for o="0" true="{o<perlin_octaves}" step="1">
      <var of="{xi+(yi<<PERLIN_YWRAPB)+(zi<<PERLIN_ZWRAPB)}"/>
      <asgn rxf="{scaled_cosine(xf)}" ryf="{scaled_cosine(yf)}"/>
      <asgn n1="{NTH(p_perlin,of&amp;PERLIN_SIZE)}"/>
      <asgn n1="{n1+rxf*(NTH(p_perlin,(of+1)&amp;PERLIN_SIZE)-n1)}"/>
      <asgn n2="{NTH(p_perlin,(of+PERLIN_YWRAP)&amp;PERLIN_SIZE)}"/>
      <asgn n2="{n2+rxf*(NTH(p_perlin,(of+PERLIN_YWRAP+1)&amp;PERLIN_SIZE)-n2)}"/>
      <asgn n1="{n1+ryf*(n2-n1)}"/>
      <asgn of="{of+PERLIN_ZWRAP}"/>
      <asgn n2="{NTH(p_perlin,of&amp;PERLIN_SIZE)}"/>
      <asgn n2="{n2+rxf*(NTH(p_perlin,(of+1)&amp;PERLIN_SIZE)-n2)}"/>
      <asgn n3="{NTH(p_perlin,(of+PERLIN_YWRAP)&amp;PERLIN_SIZE)}"/>
      <asgn n3="{n3+rxf*(NTH(p_perlin,(of+PERLIN_YWRAP+1)&amp;PERLIN_SIZE)-n3)}"/>
      <asgn n2="{n2+ryf*(n3-n2)}"/>
      <asgn n1="{n1+scaled_cosine(zf)*(n2-n1)}"/>
      <asgn r="{r+n1*ampl}"/>
      <asgn ampl="{ampl*perlin_amp_falloff}"/>
      <asgn xi="{xi<<1}" xf="{xf*2}" yi="{yi<<1}" yf="{yf*2}" zi="{zi<<1}" zf="{zf*2}"/>
      <if true="{xf>=1.0}"><asgn xi="{xi+1}" xf="{xf-1}"/></if>
      <if true="{yf>=1.0}"><asgn yi="{yi+1}" yf="{yf-1}"/></if>
      <if true="{zf>=1.0}"><asgn zi="{zi+1}" zf="{zf-1}"/></if>
    </for>
    <return value="{r}"/>
  </def-noise>


  <!-- drawing code begins -->

  <fill color="black"/>
  <stroke color="white" weight="1.2"/>
  
  <var MARG_X="50"
       MARG_BOT="20"
       MAX_H="100"
       MARG_TOP="60"
       STEP_Y="6"
       COLS="128"
       FNPAD="0.2"
       ROWS="{FLOOR((HEIGHT-MARG_TOP-MARG_BOT)/STEP_Y)}"
       STEP_X="{(WIDTH-MARG_X*2)/COLS}"/>
  
  <for i="0" true="{i<ROWS}" step="1">
    <var row=""/>
    <for j="0" true="{j<COLS}" step="1">
      <var x="{j*STEP_X}"/>
      <var y="{i*STEP_Y}"/>
      <var m="0.05"/>
      <var t="{(j/COLS-FNPAD)/(1-FNPAD*2)}"/>
      <if true="{0<t&amp;&amp;t<1}">

        <asgn m="{m+(COS(t*PI*2+PI)+1)/2}"/>
      </if>
      <var z="{MAX(0.05,noise(i*0.5,x*0.04)-0.25)*m}"/>
      <asgn row="{CAT(row,MARG_X+x,MARG_TOP+y-MAX_H*z)}"/>
    </for>
    <polyline points="{row}"/>
  </for>


</psvg>